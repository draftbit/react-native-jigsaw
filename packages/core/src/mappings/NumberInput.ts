import {
  GROUPS,
  COMPONENT_TYPES,
  FORM_TYPES,
  PROP_TYPES,
  FIELD_NAME,
  Triggers,
  StylesPanelSections,
} from "@draftbit/types";

export const SEED_DATA_PROPS = {
  style: {
    group: GROUPS.basic,
    label: "Style",
    description: "Text Style",
    editable: false,
    required: false,
    formType: FORM_TYPES.typeStyle,
    propType: PROP_TYPES.THEME,
    defaultValue: null,
  },
  clearButtonMode: {
    group: GROUPS.basic,
    label: "Clear Button Mode",
    description:
      "Enables a button within the textInput to clear the data entered",
    editable: true,
    required: false,
    options: ["never", "while-editing", "unless-editing", "always"],
    defaultValue: null,
    formType: FORM_TYPES.flatArray,
    propType: PROP_TYPES.STRING,
  },
  clearTextOnFocus: {
    group: GROUPS.basic,
    label: "Clear Text on Focus",
    description:
      "If true, clears the text field automatically when its focused.",
    editable: true,
    required: false,
    defaultValue: null,
    formType: FORM_TYPES.boolean,
    propType: PROP_TYPES.BOOLEAN,
  },
  enablesReturnKeyAutomatically: {
    group: GROUPS.basic,
    label: "Enables Return Key Automatically",
    description:
      "If true, the keyboard disables the return key when there is no text and automatically enables it when there is (Default: false)",
    editable: true,
    required: false,
    defaultValue: null,
    formType: FORM_TYPES.boolean,
    propType: PROP_TYPES.BOOLEAN,
  },
  underlineColorAndroid: {
    group: GROUPS.basic,
    label: "Underline color",
    description:
      "(Android Only) The color of the underline(the line underneath the text when finished typing.",
    editable: true,
    required: false,
    defaultValue: null,
    formType: FORM_TYPES.color,
    propType: PROP_TYPES.THEME,
  },
  fieldName: {
    ...FIELD_NAME,
    defaultValue: "numberInputValue",
    handlerPropName: "onChangeText",
  },
};

export const SEED_DATA = [
  {
    name: "Number Input",
    tag: "NumberInput",
    description: "An input field that allows users to type in data.",
    category: COMPONENT_TYPES.input,
    stylesPanelSections: [
      StylesPanelSections.Typography,
      StylesPanelSections.Background,
      StylesPanelSections.Size,
      StylesPanelSections.MarginsAndPaddings,
      StylesPanelSections.Position,
      StylesPanelSections.Borders,
      StylesPanelSections.Effects,
    ],
    preview_image_url:
      "https://res.cloudinary.com/altos/image/upload/draftbit/Jigsaw/TextInput.png",
    supports_list_render: false,
    layout: {
      borderLeftWidth: 1,
      borderRightWidth: 1,
      borderTopWidth: 1,
      borderBottomWidth: 1,
      borderColor: "divider",
      paddingLeft: 8,
      paddingRight: 8,
      paddingTop: 8,
      paddingBottom: 8,
      borderRadius: 8,
    },
    triggers: [Triggers.OnChangeText],
    props: {
      ...SEED_DATA_PROPS,
      allowFontScaling: {
        group: GROUPS.advanced,
        label: "Allow Font Scaling",
        description:
          "Whether fonts should scale to respect Text Size in the user's accessibility settings. (Default: true)",
        editable: true,
        required: false,
        defaultValue: null,
        formType: FORM_TYPES.boolean,
        propType: PROP_TYPES.BOOLEAN,
      },
      autoFocus: {
        group: GROUPS.basic,
        label: "Auto Focus",
        description: "Focuses the input on load in and brings up the keyboard",
        editable: true,
        required: false,
        defaultValue: null,
        formType: FORM_TYPES.boolean,
        propType: PROP_TYPES.BOOLEAN,
      },
      caretHidden: {
        group: GROUPS.advanced,
        label: "Hide Caret",
        description:
          "Hides the caret(the line small line underneath each showing where you're editing/typing",
        editable: true,
        required: false,
        defaultValue: null,
        formType: FORM_TYPES.boolean,
        propType: PROP_TYPES.BOOLEAN,
      },
      contextMenuHidden: {
        group: GROUPS.advanced,
        label: "Hide Context Menu",
        description: "Hides the system context menu (Default: false)",
        editable: true,
        required: false,
        defaultValue: null,
        formType: FORM_TYPES.boolean,
        propType: PROP_TYPES.BOOLEAN,
      },
      editable: {
        group: GROUPS.advanced,
        label: "Editable",
        description: "If false, the text is not editable",
        editable: true,
        required: false,
        defaultValue: true,
        formType: FORM_TYPES.boolean,
        propType: PROP_TYPES.BOOLEAN,
      },
      keyboardAppearance: {
        group: GROUPS.advanced,
        label: "Keyboard Appearance",
        description: "Determines the color of the keyboard.(iOS Only)",
        editable: true,
        required: false,
        defaultValue: null,
        options: ["default", "light", "dark"],
        formType: FORM_TYPES.flatArray,
        propType: PROP_TYPES.STRING,
      },
      keyboardType: {
        group: GROUPS.advanced,
        label: "Keyboard Type",
        description: "Determines what keyboard is given to the user.",
        editable: true,
        required: false,
        defaultValue: null,
        options: ["numeric", "numbers-and-punctuation", "number-pad"],
        formType: FORM_TYPES.flatArray,
        propType: PROP_TYPES.STRING,
      },
      maxLength: {
        group: GROUPS.basic,
        label: "Max Length",
        description: "Limits the input to a set number of characters.",
        editable: true,
        required: false,
        defaultValue: null,
        min: 0,
        step: 1,
        precision: 0,
        formType: FORM_TYPES.number,
        propType: PROP_TYPES.NUMBER,
      },
      placeholder: {
        group: GROUPS.basic,
        label: "Placeholder Text",
        description:
          "The text that is shown on load when no value is available.",
        editable: true,
        required: false,
        defaultValue: "Enter a number...",
        formType: FORM_TYPES.string,
        propType: PROP_TYPES.STRING,
      },
      placeholderTextColor: {
        group: GROUPS.basic,
        label: "Placeholder Text Color",
        description: "The color of the placeholder text.",
        editable: true,
        required: false,
        defaultValue: null,
        formType: FORM_TYPES.color,
        propType: PROP_TYPES.STRING,
      },
      returnKeyLabel: {
        group: GROUPS.advanced,
        label: "Return Key Label",
        description:
          "(Android Only) Sets the label on the return key (use this instead of rewturnKeyType)",
        editable: true,
        required: false,
        defaultValue: null,
        formType: FORM_TYPES.string,
        propType: PROP_TYPES.STRING,
      },
      returnKeyType: {
        group: GROUPS.advanced,
        label: "Return Key Type",
        description: "Determines how the return key should look like",
        editable: true,
        required: false,
        defaultValue: null,
        options: [
          "done",
          "go",
          "next",
          "search",
          "send",
          "none",
          "previous",
          "default",
          "emergency-call",
          "google",
          "join",
          "route",
          "yahoo",
        ],
        formType: FORM_TYPES.flatArray,
        propType: PROP_TYPES.STRING,
      },
      selectionColor: {
        group: GROUPS.advanced,
        label: "Selection Color",
        description: "Color of the highlighted portion when selecting.",
        editable: true,
        required: false,
        defaultValue: null,
        formType: FORM_TYPES.color,
        propType: PROP_TYPES.STRING,
      },
      selectTextOnFocus: {
        group: GROUPS.advanced,
        label: "Select Text on Focus",
        description:
          "If true, all the text will automatically be selected on focus",
        editable: true,
        required: false,
        defaultValue: null,
        formType: FORM_TYPES.boolean,
        propType: PROP_TYPES.BOOLEAN,
      },
    },
  },
];
